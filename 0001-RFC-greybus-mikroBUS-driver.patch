From 0f04183e775c36ca0a969018fea56b40730cd5ee Mon Sep 17 00:00:00 2001
From: Vaishnav M A <mavaishnav007@gmail.com>
Date: Mon, 20 Jul 2020 10:09:56 +0000
Subject: [PATCH] RFC greybus : mikroBUS driver to instantiate Mikroe Clicks
​
Attached is a patch for the mikroBUS Driver which helps to
instantiate a click board device on a mikrobus port by fetching
the device identifier manifest binary from an EEPROM on-board
the device. mikroBUS is an add-on board socket standard by
MikroElektronika that can be freely used by anyone
following the guidelines (https://www.mikroe.com/mikrobus).
​
In the current state of the driver, more than 80 different
MikroElektronika Click Boards have been tested on Beaglebone
Targets and the manifest binary is generated using the same
manifesto tool used to generate Greybus Manifest Binaries,
The pull request to manifesto to add new descriptors specific
to mikrobus is here : https://github.com/projectara/manifesto/pull/2
​
The mikroBUS standard includes SPI, I2C, UART, PWM, ADC, GPIO
and power (3.3V and 5V) connections to interface common embedded
peripherals, There are more than 750 Click add-on boards ranging
from wireless connectivity clicks to Human Machine Interface clicks
which conform to the mikroBUS standard, out of which more than 140
clicks already have support in the Linux kernel.Today, there is no mainline
solution for enabling mikroBUS add-on boards at run-time, the most straight
forward method for loading drivers is to provide device-tree overlay
fragments at boot time, this method suffers from the need to maintain
a large out-of-tree database for which there is need to maintain an
overlay for every mikroBUS add-on board for every Linux system and
for every mikroBUS socket on that system.
​
The mikroBUS driver tries to solve the problem by using an extended version
of the greybus manifest to describe the Click Board device specific
information required by the device driver along with the fixed port
specific information to probe the click device driver.The manifest
binary can be fetched from an I2C EEPROM over the I2C bus on the mikroBUS
port, and enumerate drivers for the Click Board Devices.The driver
also has a few debug SysFS interfaces for testing on clicks without
an EEPROM, these can be used in the following manner:
(example for mikroBUS port 1 on Beagleboard.org PocketBeagle):
​
printf "%b" '\x01\x00\x00\x59\x32\x17' > /sys/bus/mikrobus/add_port
​
	The bytes in the byte array sequence are (in order):
​
	* i2c_adap_nr
	* spi_master_nr
	* serdev_ctlr_nr
	* rst_gpio_nr
	* pwm_gpio_nr
	* int_gpio_nr
​
echo 0 > /sys/bus/mikrobus/del_port (to delete the attached port)
echo 1 >  /sys/class/mikrobus-port/mikrobus-0/rescan (to rescan the EEPROM
contents on the I2C bus on the mikroBUS port).
​
cat click_manifest.mnfb >  /sys/class/mikrobus-port/mikrobus-0/new_device
* debug interface to pass the manifest binary in case an EEPROM is absent
echo 0 >  /sys/class/mikrobus-port/mikrobus-0/delete_device
* to unload the loaded click on the mikrobus port
​
The mikroBUS driver helps to reduce the time to develop and debug
support for various mikroBUS add-on boards. Further, it opens up
the possibility for support under dynamically instantiated buses
such as with Greybus.
​
Please let know the feedback you have on this patch or the approach used.
​
Thanks,
​
Vaishnav M A
​
Signed-off-by: Vaishnav M A <mavaishnav007@gmail.com>
---
 drivers/misc/Kconfig                      |   1 +
 drivers/misc/Makefile                     |   1 +
 drivers/misc/mikrobus/Kconfig             |  13 +
 drivers/misc/mikrobus/Makefile            |   5 +
 drivers/misc/mikrobus/mikrobus_core.c     | 722 ++++++++++++++++++++++
 drivers/misc/mikrobus/mikrobus_core.h     | 127 ++++
 drivers/misc/mikrobus/mikrobus_manifest.c | 441 +++++++++++++
 drivers/misc/mikrobus/mikrobus_manifest.h | 125 ++++
 8 files changed, 1435 insertions(+)
 create mode 100644 drivers/misc/mikrobus/Kconfig
 create mode 100644 drivers/misc/mikrobus/Makefile
 create mode 100644 drivers/misc/mikrobus/mikrobus_core.c
 create mode 100644 drivers/misc/mikrobus/mikrobus_core.h
 create mode 100644 drivers/misc/mikrobus/mikrobus_manifest.c
 create mode 100644 drivers/misc/mikrobus/mikrobus_manifest.h
​
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index e1b1ba5e2b92..334f0c39d56b 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -472,4 +472,5 @@ source "drivers/misc/ocxl/Kconfig"
 source "drivers/misc/cardreader/Kconfig"
 source "drivers/misc/habanalabs/Kconfig"
 source "drivers/misc/uacce/Kconfig"
+source "drivers/misc/mikrobus/Kconfig"
 endmenu
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index c7bd01ac6291..45486dd77da5 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -40,6 +40,7 @@ obj-$(CONFIG_VMWARE_BALLOON)	+= vmw_balloon.o
 obj-$(CONFIG_PCH_PHUB)		+= pch_phub.o
 obj-y				+= ti-st/
 obj-y				+= lis3lv02d/
+obj-y				+= mikrobus/
 obj-$(CONFIG_ALTERA_STAPL)	+=altera-stapl/
 obj-$(CONFIG_INTEL_MEI)		+= mei/
 obj-$(CONFIG_VMWARE_VMCI)	+= vmw_vmci/
diff --git a/drivers/misc/mikrobus/Kconfig b/drivers/misc/mikrobus/Kconfig
new file mode 100644
index 000000000000..a314e156ffb1
--- /dev/null
+++ b/drivers/misc/mikrobus/Kconfig
@@ -0,0 +1,13 @@
+menuconfig MIKROBUS
+	tristate "Module for instantiating devices on mikroBUS ports"
+	help
+	  This option enables the mikroBUS driver. mikroBUS is an add-on
+	  board socket standard that offers maximum expandability with
+	  the smallest number of pins. The mikroBUS driver helps in
+	  instantiating devices on the mikroBUS port with identifier
+	  data fetched from an EEPROM on the device.
+
+	  Say Y here to enable support for this driver.
+
+	  To compile this code as a module, chose M here: the module
+	  will be called mikrobus.ko
diff --git a/drivers/misc/mikrobus/Makefile b/drivers/misc/mikrobus/Makefile
new file mode 100644
index 000000000000..1f80ed4064d8
--- /dev/null
+++ b/drivers/misc/mikrobus/Makefile
@@ -0,0 +1,5 @@
+# SPDX-License-Identifier: GPL-2.0
+# mikroBUS Core
+
+mikrobus-y :=	mikrobus_core.o	mikrobus_manifest.o
+obj-$(CONFIG_MIKROBUS) += mikrobus.o
\ No newline at end of file
diff --git a/drivers/misc/mikrobus/mikrobus_core.c b/drivers/misc/mikrobus/mikrobus_core.c
new file mode 100644
index 000000000000..6f00673205c3
--- /dev/null
+++ b/drivers/misc/mikrobus/mikrobus_core.c
@@ -0,0 +1,722 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * mikroBUS Driver for instantiating mikroElektronika
+ * click board devices with an identifier EEPROM
+ *
+ * Copyright 2020 Beagleboard.org Foundation.
+ */
+
+#define pr_fmt(fmt) "mikrobus: " fmt
+
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/idr.h>
+#include <linux/init.h>
+#include <linux/jump_label.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/gpio/consumer.h>
+#include <linux/mutex.h>
+#include <linux/device.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/i2c.h>
+#include <linux/gpio.h>
+#include <linux/gpio/machine.h>
+#include <linux/nvmem-consumer.h>
+#include <linux/nvmem-provider.h>
+#include <linux/interrupt.h>
+#include <linux/spi/spi.h>
+#include <linux/serdev.h>
+#include <linux/property.h>
+#include <linux/slab.h>
+
+#include "mikrobus_core.h"
+#include "mikrobus_manifest.h"
+
+#define ATMEL_24C32_I2C_ADDR 0x57
+
+static DEFINE_IDR(mikrobus_port_idr);
+static struct class_compat *mikrobus_port_compat_class;
+static bool is_registered;
+
+static ssize_t add_port_store(struct bus_type *bt, const char *buf,
+			      size_t count)
+{
+  struct mikrobus_port_config *cfg;
+
+  if (count < sizeof(*cfg)) {
+	pr_err("new_port:Incorrect CFG data received: %s \n", buf);
+	return -EINVAL;
+  }
+
+  mikrobus_register_port_config((void *)buf);
+
+  return count;
+}
+BUS_ATTR_WO(add_port);
+
+static ssize_t del_port_store(struct bus_type *bt, const char *buf,
+							  size_t count)
+{
+  int id;
+  char end;
+  int res;
+
+  res = sscanf(buf, "%d%c", &id, &end);
+  if (res < 1) {
+	pr_err("delete_port: Can't parse Mikrobus Port ID\n");
+	return -EINVAL;
+  }
+
+  if (!idr_find(&mikrobus_port_idr, id)) {
+	pr_err("attempting to delete unregistered port [%d]\n", id);
+	return -EINVAL;
+  }
+
+  mikrobus_del_port(idr_find(&mikrobus_port_idr, id));
+
+  return count;
+}
+BUS_ATTR_WO(del_port);
+
+static struct attribute *mikrobus_attrs[] = {&bus_attr_add_port.attr,
+											 &bus_attr_del_port.attr, NULL};
+ATTRIBUTE_GROUPS(mikrobus);
+
+struct bus_type mikrobus_bus_type = {
+	.name = "mikrobus", .bus_groups = mikrobus_groups,
+};
+EXPORT_SYMBOL_GPL(mikrobus_bus_type);
+
+static int mikrobus_port_scan_eeprom(struct mikrobus_port *port)
+{
+  char header[12];
+  struct click_board_info *click;
+  int manifest_size;
+  int retval;
+  char *buf;
+
+  nvmem_device_read(port->eeprom, 0, 12, header);
+  manifest_size = mikrobus_manifest_header_validate(header, 12);
+  if (manifest_size > 0) {
+	buf = kzalloc(manifest_size, GFP_KERNEL);
+	nvmem_device_read(port->eeprom, 0, manifest_size, buf);
+
+	click = kzalloc(sizeof(*click), GFP_KERNEL);
+	if (!click) {
+	  return -ENOMEM;
+	}
+
+	INIT_LIST_HEAD(&click->manifest_descs);
+	INIT_LIST_HEAD(&click->devices);
+
+	retval = mikrobus_manifest_parse(click, (void *)buf, manifest_size);
+	if (!retval) {
+	  pr_err("failed to parse manifest, size: %d", manifest_size);
+	  return -EINVAL;
+	}
+
+	retval = mikrobus_register_click(port, click);
+	if (retval) {
+	  pr_err("failed to register click: %s", click->name);
+	  return -EINVAL;
+	}
+	kfree(buf);
+  } else {
+	pr_err("inavlide manifest port %d", port->id);
+	return -EINVAL;
+  }
+
+  return 0;
+}
+
+static ssize_t name_show(struct device *dev, struct device_attribute *attr,
+						 char *buf)
+{
+  return sprintf(buf, "%s\n", to_mikrobus_port(dev)->name);
+}
+static DEVICE_ATTR_RO(name);
+
+static ssize_t new_device_store(struct device *dev,
+								struct device_attribute *attr, const char *buf,
+								size_t count)
+{
+  struct mikrobus_port *port = to_mikrobus_port(dev);
+  struct click_board_info *click;
+
+  int retval;
+
+  if (port->click == NULL) {
+	click = kzalloc(sizeof(*click), GFP_KERNEL);
+	if (!click) {
+	  return -EINVAL;
+	}
+
+	INIT_LIST_HEAD(&click->manifest_descs);
+	INIT_LIST_HEAD(&click->devices);
+  } else {
+	pr_err("port %d already has click registered", port->id);
+	return -EINVAL;
+  }
+
+  retval = mikrobus_manifest_parse(click, (void *)buf, count);
+
+  if (!retval) {
+	pr_err("failed to parse manifest");
+	return -EINVAL;
+  }
+
+  retval = mikrobus_register_click(port, click);
+  if (retval) {
+	pr_err("failed to register click: %s", click->name);
+	return -EINVAL;
+  }
+
+  return count;
+}
+static DEVICE_ATTR_WO(new_device);
+
+static ssize_t rescan_store(struct device *dev, struct device_attribute *attr,
+							const char *buf, size_t count)
+{
+  struct mikrobus_port *port = to_mikrobus_port(dev);
+  int id;
+  char end;
+  int res;
+  int retval;
+
+  res = sscanf(buf, "%d%c", &id, &end);
+  if (res < 1) {
+	pr_err("rescan: Can't parse trigger\n");
+	return -EINVAL;
+  }
+
+  if (port->click != NULL) {
+	pr_err("port %d already has click registered", port->id);
+	return -EINVAL;
+  }
+
+  retval = mikrobus_port_scan_eeprom(port);
+  if (retval) {
+	pr_err("port %d click register from manifest failed", port->id);
+	return -EINVAL;
+  }
+
+  return count;
+}
+static DEVICE_ATTR_WO(rescan);
+
+static ssize_t delete_device_store(struct device *dev,
+								   struct device_attribute *attr,
+								   const char *buf, size_t count)
+{
+  int id;
+  char end;
+  int res;
+  struct mikrobus_port *port = to_mikrobus_port(dev);
+
+  res = sscanf(buf, "%d%c", &id, &end);
+  if (res < 1) {
+	pr_err("delete_click: Can't parse Click ID\n");
+	return -EINVAL;
+  }
+
+  if (port->click == NULL) {
+	pr_err("delete_click: port does not have any clicks registered\n");
+	return -EINVAL;
+  }
+
+  mikrobus_unregister_click(port, port->click);
+
+  return count;
+}
+static DEVICE_ATTR_IGNORE_LOCKDEP(delete_device, S_IWUS...
